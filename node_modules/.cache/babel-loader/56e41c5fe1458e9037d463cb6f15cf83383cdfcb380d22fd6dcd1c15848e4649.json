{"ast":null,"code":"var _jsxFileName = \"/Users/tanmayjoshi/Workspace/react-workspace/assignment2/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [gridSize, setGridSize] = useState({\n    rows: 15,\n    cols: 20\n  });\n  const [wavePosition, setWavePosition] = useState(0);\n  const [waveDirection, setWaveDirection] = useState(1);\n  const [colorPhase, setColorPhase] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [speed, setSpeed] = useState(100);\n  const [colorChangeTimer, setColorChangeTimer] = useState(0);\n\n  // Generate wave pattern for each row - now uses all grids\n  const generateWavePattern = useCallback((row, time) => {\n    const waveHeight = gridSize.cols; // Use all columns for the wave\n    const centerPosition = wavePosition;\n    const waveSpread = Math.sin(row * 0.3 + time * 0.01) * 2;\n    return Array.from({\n      length: gridSize.cols\n    }, (_, col) => {\n      // Create a wave that spans the entire width with varying intensity\n      const waveIntensity = Math.sin(col * 0.5 + time * 0.02 + row * 0.1) * 0.5 + 0.5;\n      const distanceFromCenter = Math.abs(col - centerPosition);\n      const centerIntensity = Math.max(0, 1 - distanceFromCenter / (gridSize.cols * 0.3));\n      const finalIntensity = waveIntensity * (0.3 + 0.7 * centerIntensity);\n      const gradientPosition = col / gridSize.cols;\n      return {\n        intensity: finalIntensity,\n        gradientPos: gradientPosition\n      };\n    });\n  }, [wavePosition, gridSize.cols]);\n\n  // Generate color based on phase and position - changes every 4 seconds\n  const getColor = (intensity, gradientPos, phase) => {\n    if (intensity === 0) return '#000000';\n\n    // Color changes every 4 seconds (4000ms / 100ms = 40 cycles)\n    const colorCycle = Math.floor(phase / 40) % 6;\n    const baseHue = colorCycle * 60; // 0, 60, 120, 180, 240, 300 degrees\n\n    const hue = (baseHue + gradientPos * 60) % 360;\n    const saturation = 80 + intensity * 20;\n    const lightness = 20 + intensity * 40;\n    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n  };\n\n  // Animation loop\n  useEffect(() => {\n    if (!isPlaying) return;\n    const interval = setInterval(() => {\n      setWavePosition(prev => {\n        const newPos = prev + waveDirection;\n        if (newPos >= gridSize.cols - 3 || newPos <= 3) {\n          setWaveDirection(prevDir => -prevDir);\n        }\n        return Math.max(3, Math.min(gridSize.cols - 3, newPos));\n      });\n      setColorPhase(prev => (prev + 1) % 240); // 240 cycles = 4 seconds at 100ms intervals\n      setColorChangeTimer(prev => prev + 1);\n    }, speed);\n    return () => clearInterval(interval);\n  }, [isPlaying, waveDirection, gridSize.cols, speed]);\n  const handleGridSizeChange = (type, value) => {\n    const newValue = Math.max(5, Math.min(30, parseInt(value) || 5));\n    setGridSize(prev => ({\n      ...prev,\n      [type]: newValue\n    }));\n  };\n  const togglePlayPause = () => {\n    setIsPlaying(prev => !prev);\n  };\n  const resetWave = () => {\n    setWavePosition(Math.floor(gridSize.cols / 2));\n    setWaveDirection(1);\n    setColorPhase(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"\\uD83C\\uDF0A Bouncing Wave Grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Rows: \", gridSize.rows]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"5\",\n            max: \"30\",\n            value: gridSize.rows,\n            onChange: e => handleGridSizeChange('rows', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Cols: \", gridSize.cols]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"5\",\n            max: \"30\",\n            value: gridSize.cols,\n            onChange: e => handleGridSizeChange('cols', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Speed: \", speed, \"ms\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"50\",\n            max: \"500\",\n            value: speed,\n            onChange: e => setSpeed(parseInt(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: togglePlayPause,\n          className: \"play-button\",\n          children: isPlaying ? '⏸️ Pause' : '▶️ Play'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetWave,\n          className: \"reset-button\",\n          children: \"\\uD83D\\uDD04 Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        style: {\n          gridTemplateColumns: `repeat(${gridSize.cols}, 1fr)`,\n          gridTemplateRows: `repeat(${gridSize.rows}, 1fr)`\n        },\n        children: Array.from({\n          length: gridSize.rows\n        }, (_, row) => generateWavePattern(row, colorPhase).map((cell, col) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-cell\",\n          style: {\n            backgroundColor: getColor(cell.intensity, cell.gradientPos, colorPhase),\n            boxShadow: cell.intensity > 0 ? `0 0 ${cell.intensity * 10}px ${getColor(cell.intensity, cell.gradientPos, colorPhase)}` : 'none'\n          }\n        }, `${row}-${col}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-panel\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Wave Position:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: wavePosition.toFixed(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Color Phase:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: [colorPhase, \"\\xB0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Direction:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: waveDirection > 0 ? '→' : '←'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"LQT1PMBLGMc+veR2s9elCMscJ1A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","App","_s","gridSize","setGridSize","rows","cols","wavePosition","setWavePosition","waveDirection","setWaveDirection","colorPhase","setColorPhase","isPlaying","setIsPlaying","speed","setSpeed","colorChangeTimer","setColorChangeTimer","generateWavePattern","row","time","waveHeight","centerPosition","waveSpread","Math","sin","Array","from","length","_","col","waveIntensity","distanceFromCenter","abs","centerIntensity","max","finalIntensity","gradientPosition","intensity","gradientPos","getColor","phase","colorCycle","floor","baseHue","hue","saturation","lightness","interval","setInterval","prev","newPos","prevDir","min","clearInterval","handleGridSizeChange","type","value","newValue","parseInt","togglePlayPause","resetWave","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","onClick","style","gridTemplateColumns","gridTemplateRows","map","cell","backgroundColor","boxShadow","toFixed","_c","$RefreshReg$"],"sources":["/Users/tanmayjoshi/Workspace/react-workspace/assignment2/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\n\nconst App = () => {\n  const [gridSize, setGridSize] = useState({ rows: 15, cols: 20 });\n  const [wavePosition, setWavePosition] = useState(0);\n  const [waveDirection, setWaveDirection] = useState(1);\n  const [colorPhase, setColorPhase] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [speed, setSpeed] = useState(100);\n  const [colorChangeTimer, setColorChangeTimer] = useState(0);\n\n  // Generate wave pattern for each row - now uses all grids\n  const generateWavePattern = useCallback((row, time) => {\n    const waveHeight = gridSize.cols; // Use all columns for the wave\n    const centerPosition = wavePosition;\n    const waveSpread = Math.sin((row * 0.3) + (time * 0.01)) * 2;\n    \n    return Array.from({ length: gridSize.cols }, (_, col) => {\n      // Create a wave that spans the entire width with varying intensity\n      const waveIntensity = Math.sin((col * 0.5) + (time * 0.02) + (row * 0.1)) * 0.5 + 0.5;\n      const distanceFromCenter = Math.abs(col - centerPosition);\n      const centerIntensity = Math.max(0, 1 - (distanceFromCenter / (gridSize.cols * 0.3)));\n      \n      const finalIntensity = waveIntensity * (0.3 + 0.7 * centerIntensity);\n      const gradientPosition = col / gridSize.cols;\n      \n      return {\n        intensity: finalIntensity,\n        gradientPos: gradientPosition\n      };\n    });\n  }, [wavePosition, gridSize.cols]);\n\n  // Generate color based on phase and position - changes every 4 seconds\n  const getColor = (intensity, gradientPos, phase) => {\n    if (intensity === 0) return '#000000';\n    \n    // Color changes every 4 seconds (4000ms / 100ms = 40 cycles)\n    const colorCycle = Math.floor(phase / 40) % 6;\n    const baseHue = colorCycle * 60; // 0, 60, 120, 180, 240, 300 degrees\n    \n    const hue = (baseHue + gradientPos * 60) % 360;\n    const saturation = 80 + intensity * 20;\n    const lightness = 20 + intensity * 40;\n    \n    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n  };\n\n  // Animation loop\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const interval = setInterval(() => {\n      setWavePosition(prev => {\n        const newPos = prev + waveDirection;\n        if (newPos >= gridSize.cols - 3 || newPos <= 3) {\n          setWaveDirection(prevDir => -prevDir);\n        }\n        return Math.max(3, Math.min(gridSize.cols - 3, newPos));\n      });\n      \n      setColorPhase(prev => (prev + 1) % 240); // 240 cycles = 4 seconds at 100ms intervals\n      setColorChangeTimer(prev => prev + 1);\n    }, speed);\n\n    return () => clearInterval(interval);\n  }, [isPlaying, waveDirection, gridSize.cols, speed]);\n\n  const handleGridSizeChange = (type, value) => {\n    const newValue = Math.max(5, Math.min(30, parseInt(value) || 5));\n    setGridSize(prev => ({\n      ...prev,\n      [type]: newValue\n    }));\n  };\n\n  const togglePlayPause = () => {\n    setIsPlaying(prev => !prev);\n  };\n\n  const resetWave = () => {\n    setWavePosition(Math.floor(gridSize.cols / 2));\n    setWaveDirection(1);\n    setColorPhase(0);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <h1 className=\"title\">🌊 Bouncing Wave Grid</h1>\n        <div className=\"controls\">\n          <div className=\"control-group\">\n            <label>Rows: {gridSize.rows}</label>\n            <input\n              type=\"range\"\n              min=\"5\"\n              max=\"30\"\n              value={gridSize.rows}\n              onChange={(e) => handleGridSizeChange('rows', e.target.value)}\n            />\n          </div>\n          <div className=\"control-group\">\n            <label>Cols: {gridSize.cols}</label>\n            <input\n              type=\"range\"\n              min=\"5\"\n              max=\"30\"\n              value={gridSize.cols}\n              onChange={(e) => handleGridSizeChange('cols', e.target.value)}\n            />\n          </div>\n          <div className=\"control-group\">\n            <label>Speed: {speed}ms</label>\n            <input\n              type=\"range\"\n              min=\"50\"\n              max=\"500\"\n              value={speed}\n              onChange={(e) => setSpeed(parseInt(e.target.value))}\n            />\n          </div>\n          <button onClick={togglePlayPause} className=\"play-button\">\n            {isPlaying ? '⏸️ Pause' : '▶️ Play'}\n          </button>\n          <button onClick={resetWave} className=\"reset-button\">\n            🔄 Reset\n          </button>\n        </div>\n      </div>\n\n      <div className=\"grid-container\">\n        <div \n          className=\"grid\"\n          style={{\n            gridTemplateColumns: `repeat(${gridSize.cols}, 1fr)`,\n            gridTemplateRows: `repeat(${gridSize.rows}, 1fr)`\n          }}\n        >\n          {Array.from({ length: gridSize.rows }, (_, row) =>\n            generateWavePattern(row, colorPhase).map((cell, col) => (\n              <div\n                key={`${row}-${col}`}\n                className=\"grid-cell\"\n                style={{\n                  backgroundColor: getColor(cell.intensity, cell.gradientPos, colorPhase),\n                  boxShadow: cell.intensity > 0 \n                    ? `0 0 ${cell.intensity * 10}px ${getColor(cell.intensity, cell.gradientPos, colorPhase)}`\n                    : 'none'\n                }}\n              />\n            ))\n          )}\n        </div>\n      </div>\n\n      <div className=\"info-panel\">\n        <div className=\"stats\">\n          <div className=\"stat\">\n            <span className=\"stat-label\">Wave Position:</span>\n            <span className=\"stat-value\">{wavePosition.toFixed(1)}</span>\n          </div>\n          <div className=\"stat\">\n            <span className=\"stat-label\">Color Phase:</span>\n            <span className=\"stat-value\">{colorPhase}°</span>\n          </div>\n          <div className=\"stat\">\n            <span className=\"stat-label\">Direction:</span>\n            <span className=\"stat-value\">{waveDirection > 0 ? '→' : '←'}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}